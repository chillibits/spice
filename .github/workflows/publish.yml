# Publish Spice
name: Release

on:
  push:
    tags:
      - '*'

jobs:
  build-compiler-linux:
    name: Build compiler binaries - Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Uninstall potential other versions of LLVM
        run: sudo apt-get purge llvm-12 clang-12 llvm-11 clang-11 llvm-10 clang-10

      - name: Setup latest GCC
        run: |
          sudo apt install gcc-11 g++-11
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: /home/runner/work/spice/spice/llvm
          key: llvm-13-0-1-linux

      - name: Clone LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: git clone --depth 1 --branch llvmorg-13.0.1 https://github.com/llvm/llvm-project.git llvm

      - name: Setup LLVM - Configure
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          mkdir ./llvm/build
          cd ./llvm/build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS_RELEASE="-O2" -GNinja -Wno-dev -Wattributes ../llvm
      
      - name: Setup LLVM - Build
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          cd ./llvm/build
          cmake --build .

      - name: Download Libs
        run: |
          mkdir -p ./compiler/lib
          cd ./compiler/lib
          git clone --branch 4.9.3 --depth 1 https://github.com/antlr/antlr4.git
          mkdir json
          curl -SsL "https://github.com/nlohmann/json/releases/download/v3.10.5/json.hpp" --output json/json.hpp
      
      - name: Configure & compile project
        env:
          LLVM_DIR: /home/runner/work/spice/spice/llvm/build/lib/cmake/llvm
        run: |
          mkdir ./bin
          cd ./bin
          cmake -GNinja -DCMAKE_CXX_FLAGS_RELEASE="-O2" ../compiler
          cmake --build .

      - name: Process build output
        working-directory: bin
        run: |
          mv ./src/Spice_run spicec
          chmod +x spicec

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: spicec-linux-x64
          path: ./bin/spicec**

  build-compiler-windows:
    name: Build compiler binaries - Windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      #- name: Setup latest GCC
      #  shell: pwsh
      #  run: |
      #    choco upgrade mingw
      #    $path = where.exe mingw32-make.exe | Get-Item
      #    Copy-Item -Path $path -Destination (Join-Path $path.Directory 'make.exe')

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: D:/a/spice/spice/llvm
          key: llvm-13-0-1-windows

      - name: Clone LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: git clone --depth 1 --branch llvmorg-13.0.1 https://github.com/llvm/llvm-project.git llvm

      - name: Setup LLVM - Configure
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          mkdir ./llvm/build
          cd ./llvm/build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS_RELEASE="-O2" -GNinja -Wno-dev -Wattributes ../llvm
      
      - name: Setup LLVM - Build
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          cd ./llvm/build
          cmake --build .

      - name: Download Libs
        run: |
          mkdir -p ./compiler/lib
          cd ./compiler/lib
          git clone --branch 4.9.3 --depth 1 https://github.com/antlr/antlr4.git
          mkdir json
          curl -SsL "https://github.com/nlohmann/json/releases/download/v3.10.5/json.hpp" -o json/json.hpp
      
      - name: Configure & compile project
        env:
          LLVM_DIR: D:/a/spice/spice/llvm/build/lib/cmake/llvm
        run: |
          mkdir ./bin
          cd ./bin
          cmake -GNinja -DCMAKE_CXX_FLAGS_RELEASE="-O2" ../compiler
          cmake --build .
          
      - name: Process build output
        working-directory: bin
        run: mv ./src/Spice_run.exe spicec.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: spicec-windows-static-x64
          path: ./bin/spicec**

  build-cli:
    name: Build CLI binaries
    needs: [build-compiler-linux, build-compiler-windows]
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Restore Go modules cache
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Docker login GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Docker login Docker Hub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: chillibits
          password: ${{ secrets.DOCKER_HUB_SECRET }}

      - name: Download all artifacts of compiler build
        uses: actions/download-artifact@v2
        with:
          path: bin

      - name: Rename compiler binaries & allow execution
        working-directory: bin
        run: |
          mv spicec-windows-static-x64 spicec-windows-amd64
          mv spicec-linux-x64 spicec-linux-amd64
          chmod -R +x ./

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: v1.5.0
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          #TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          #TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          #TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}

      - uses: actions/upload-artifact@v2
        with:
          name: dist-output
          path: dist/

  deploy-nexus:
    name: Deploy to Nexus
    needs: build-cli
    runs-on: ubuntu-latest
    if: contains(github.ref, 'rc') == false
    strategy:
      matrix:
        arch:
          - amd64
          #- 386
          #- arm64
    steps:
      - name: Get version name
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Download dist output
        uses: actions/download-artifact@v2
        with:
          name: dist-output

      - name: Deploy to Debian / Raspbian repo
        run: |
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/debian-bullseye/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/debian-buster/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/debian-stretch/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/debian-jessie/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/debian-wheezy/"

      - name: Deploy to Ubuntu repo
        run: |
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-hirsute/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-groovy/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-focal/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-bionic/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-xenial/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-trusty/"
      
      - name: Deploy to CentOS repo
        run: |
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --upload-file ./spice_${{ matrix.arch }}.rpm ${{ secrets.NEXUS_URL }}/centos/spice/${{ steps.get_version.outputs.version }}/spice-${{ matrix.arch }}.rpm
      
      - name: Deploy to Fedora repo
        run: |
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --upload-file ./spice_${{ matrix.arch }}.rpm ${{ secrets.NEXUS_URL }}/fedora/spice/${{ steps.get_version.outputs.version }}/spice-${{ matrix.arch }}.rpm

#      - name: Deploy to Alpine repo
#        run: |
#          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.apk" "${{ secrets.NEXUS_URL }}/alpine/spice/${{ steps.get_version.outputs.version }}/spice-${{ matrix.arch }}.apk"

  build-win-installers:
    name: Build installers
    needs: build-cli
    runs-on: windows-latest
    strategy:
      matrix:
        config:
          - {
              arch: amd64,
              label: x64
            }
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install GoMSI
        run: choco install -y go-msi

      - name: Get version name
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Download executables
        id: download_exe
        shell: bash
        run: |
          hub release download "${GITHUB_REF#refs/tags/}" -i '*windows_${{ matrix.config.arch }}*.zip'
          printf "::set-output name=zip::%s\n" *.zip
          unzip -o *.zip && rm -v *.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare PATH
        shell: bash
        run: |
          echo "$WIX\\bin" >> $GITHUB_PATH
          echo "C:\\Program Files\\go-msi" >> $GITHUB_PATH

      - name: Build MSI
        shell: bash
        id: build_msi
        env:
          ZIP_FILE: ${{ steps.download_exe.outputs.zip }}
        run: |
          mkdir -p build
          msi="$(basename "$ZIP_FILE" ".zip").msi"
          printf "::set-output name=msi::%s\n" "$msi"
          go-msi make --msi "$PWD/$msi" --out "$PWD/build" --version ${{ steps.get_version.outputs.version }}
          printf "::set-output name=msi::%s\n" *.msi

      - name: Upload MSI
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.build_msi.outputs.msi }}
          asset_name: spice_${{ matrix.config.label }}_setup.msi
          tag: ${{ github.ref }}
