{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Spice",
	"scopeName": "source.spice",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"comment": "String literals",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.spice"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.spice"
				}
			},
			"name": "string.quoted.double.spice",
			"patterns": [
				{
					"include": "#string_escaped_char"
				},
				{
					"include": "#string_placeholder"
				}
			]
		},
		{
			"comment": "Syntax error receiving channels",
			"match": "<\\-([\\t ]+)chan\\b",
			"captures": {
				"1": {
					"name": "invalid.illegal.receive-channel.spice"
				}
			}
		},
		{
			"comment": "Syntax error sending channels",
			"match": "\\bchan([\\t ]+)<-",
			"captures": {
				"1": {
					"name": "invalid.illegal.send-channel.spice"
				}
			}
		},
		{
			"comment": "Syntax error numeric literals",
			"match": "\\b0[0-7]*[89]\\d*\\b",
			"name": "invalid.illegal.numeric.spice"
		},
		{
			"comment": "Built-in functions",
			"match": "\\b(printf)\\b(?=\\()",
			"name": "support.function.builtin.spice"
		},
		{
			"comment": "Function declarations",
			"match": "^(\\bf\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?(\\w+)(?=\\())?",
			"captures": {
				"1": {
					"name": "keyword.function.spice"
				},
				"2": {
					"patterns": [
						{
							"include": "#brackets"
						},
						{
							"include": "#operators"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.spice"
						},
						{
							"match": "\\w+",
							"name": "entity.name.function.spice"
						}
					]
				}
			}
		},
		{
			"comment": "Functions",
			"match": "(\\bf\\b)|(\\w+)(?=\\()",
			"captures": {
				"1": {
					"name": "keyword.function.spice"
				},
				"2": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.spice"
						},
						{
							"match": "\\w+",
							"name": "support.function.spice"
						}
					]
				}
			}
		},
		{
			"include": "#numeric_literals"
		},
		{
			"comment": "Language constants",
			"match": "\\b(true|false|nil|iota)\\b",
			"name": "constant.language.spice"
		},
		{
			"begin": "\\b(package)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.package.spice"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"match": "\\d\\w*",
					"name": "invalid.illegal.identifier.spice"
				},
				{
					"match": "\\w+",
					"name": "entity.name.package.spice"
				}
			]
		},
		{
			"begin": "\\b(import)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.import.spice"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"include": "#imports"
				}
			]
		},
		{
			"match": "(?<!var)\\s*(\\w+(?:\\.\\w+)*(?>,\\s*\\w+(?:\\.\\w+)*)*)(?=\\s*=(?!=))",
			"captures": {
				"1": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.spice"
						},
						{
							"match": "\\w+(?:\\.\\w+)*",
							"name": "variable.other.assignment.spice",
							"captures": {
								"0": {
									"patterns": [
										{
											"include": "#delimiters"
										}
									]
								}
							}
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"match": "\\b\\w+(?:,\\s*\\w+)*(?=\\s*:=)",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.spice"
						},
						{
							"match": "\\w+",
							"name": "variable.other.assignment.spice"
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"comment": "Terminators",
			"match": ";",
			"name": "punctuation.terminator.spice"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#delimiters"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#runes"
		},
		{
			"include": "#storage_types"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.block.spice",
					"begin": "(\\/\\*)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.spice"
						}
					},
					"end": "(\\*\\/)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.comment.spice"
						}
					}
				},
				{
					"name": "comment.line.double-slash.spice",
					"begin": "(\\/\\/)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.spice"
						}
					},
					"end": "(?:\\n|$)"
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "\\\\([0-7]{3}|[abfnrtv\\\\\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
					"name": "constant.character.escape.spice"
				},
				{
					"match": "\\\\[^0-7xuUabfnrtv\\\"]",
					"name": "invalid.illegal.unknown-escape.spice"
				}
			]
		}
	}
}