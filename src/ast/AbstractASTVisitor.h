// Copyright (c) 2021-2022 ChilliBits. All rights reserved.

#pragma once

// Forward declarations
class ASTNode;
class EntryNode;
class MainFctDefNode;
class FctDefNode;
class ProcDefNode;
class StructDefNode;
class InterfaceDefNode;
class EnumDefNode;
class GenericTypeDefNode;
class GlobalVarDefNode;
class ExtDeclNode;
class ThreadDefNode;
class UnsafeBlockDefNode;
class ForLoopNode;
class ForeachLoopNode;
class WhileLoopNode;
class IfStmtNode;
class ElseStmtNode;
class AssertStmtNode;
class AnonymousBlockStmtNode;
class StmtLstNode;
class TypeLstNode;
class TypeAltsLstNode;
class ParamLstNode;
class ArgLstNode;
class EnumItemLstNode;
class EnumItemNode;
class FieldNode;
class SignatureNode;
class StmtNode;
class DeclStmtNode;
class SpecifierLstNode;
class SpecifierNode;
class ImportStmtNode;
class ReturnStmtNode;
class BreakStmtNode;
class ContinueStmtNode;
class PrintfCallNode;
class SizeofCallNode;
class LenCallNode;
class TidCallNode;
class JoinCallNode;
class AssignExprNode;
class TernaryExprNode;
class LogicalOrExprNode;
class LogicalAndExprNode;
class BitwiseOrExprNode;
class BitwiseXorExprNode;
class BitwiseAndExprNode;
class EqualityExprNode;
class RelationalExprNode;
class ShiftExprNode;
class AdditiveExprNode;
class MultiplicativeExprNode;
class CastExprNode;
class PrefixUnaryExprNode;
class PostfixUnaryExprNode;
class AtomicExprNode;
class ValueNode;
class PrimitiveValueNode;
class FunctionCallNode;
class ArrayInitializationNode;
class StructInstantiationNode;
class DataTypeNode;
class BaseDataTypeNode;
class CustomDataTypeNode;

template <typename T> class AbstractASTVisitor {
public:
  // General visitor method
  virtual T visit(ASTNode *node);
  virtual T visitChildren(ASTNode *node);

  // Visitor methods
  virtual T visitEntry(EntryNode *node) = 0;
  virtual T visitMainFctDef(MainFctDefNode *node) = 0;
  virtual T visitFctDef(FctDefNode *node) = 0;
  virtual T visitProcDef(ProcDefNode *node) = 0;
  virtual T visitStructDef(StructDefNode *node) = 0;
  virtual T visitInterfaceDef(InterfaceDefNode *node) = 0;
  virtual T visitEnumDef(EnumDefNode *node) = 0;
  virtual T visitGenericTypeDef(GenericTypeDefNode *node) = 0;
  virtual T visitGlobalVarDef(GlobalVarDefNode *node) = 0;
  virtual T visitExtDecl(ExtDeclNode *node) = 0;
  virtual T visitThreadDef(ThreadDefNode *node) = 0;
  virtual T visitUnsafeBlockDef(UnsafeBlockDefNode *node) = 0;
  virtual T visitForLoop(ForLoopNode *node) = 0;
  virtual T visitForeachLoop(ForeachLoopNode *node) = 0;
  virtual T visitWhileLoop(WhileLoopNode *node) = 0;
  virtual T visitIfStmt(IfStmtNode *node) = 0;
  virtual T visitElseStmt(ElseStmtNode *node) = 0;
  virtual T visitAssertStmt(AssertStmtNode *node) = 0;
  virtual T visitAnonymousBlockStmt(AnonymousBlockStmtNode *node) = 0;
  virtual T visitStmtLst(StmtLstNode *node) = 0;
  virtual T visitTypeLst(TypeLstNode *node) = 0;
  virtual T visitTypeAltsLst(TypeAltsLstNode *node) = 0;
  virtual T visitParamLst(ParamLstNode *node) = 0;
  virtual T visitArgLst(ArgLstNode *node) = 0;
  virtual T visitEnumItemLst(EnumItemLstNode *node) = 0;
  virtual T visitEnumItem(EnumItemNode *node) = 0;
  virtual T visitField(FieldNode *node) = 0;
  virtual T visitSignature(SignatureNode *node) = 0;
  virtual T visitStmt(StmtNode *node) = 0;
  virtual T visitDeclStmt(DeclStmtNode *node) = 0;
  virtual T visitSpecifierLst(SpecifierLstNode *node) = 0;
  virtual T visitSpecifier(SpecifierNode *node) = 0;
  virtual T visitImportStmt(ImportStmtNode *node) = 0;
  virtual T visitReturnStmt(ReturnStmtNode *node) = 0;
  virtual T visitBreakStmt(BreakStmtNode *node) = 0;
  virtual T visitContinueStmt(ContinueStmtNode *node) = 0;
  virtual T visitPrintfCall(PrintfCallNode *node) = 0;
  virtual T visitSizeofCall(SizeofCallNode *node) = 0;
  virtual T visitLenCall(LenCallNode *node) = 0;
  virtual T visitTidCall(TidCallNode *node) = 0;
  virtual T visitJoinCall(JoinCallNode *node) = 0;
  virtual T visitAssignExpr(AssignExprNode *node) = 0;
  virtual T visitTernaryExpr(TernaryExprNode *node) = 0;
  virtual T visitLogicalOrExpr(LogicalOrExprNode *node) = 0;
  virtual T visitLogicalAndExpr(LogicalAndExprNode *node) = 0;
  virtual T visitBitwiseOrExpr(BitwiseOrExprNode *node) = 0;
  virtual T visitBitwiseXorExpr(BitwiseXorExprNode *node) = 0;
  virtual T visitBitwiseAndExpr(BitwiseAndExprNode *node) = 0;
  virtual T visitEqualityExpr(EqualityExprNode *node) = 0;
  virtual T visitRelationalExpr(RelationalExprNode *node) = 0;
  virtual T visitShiftExpr(ShiftExprNode *node) = 0;
  virtual T visitAdditiveExpr(AdditiveExprNode *node) = 0;
  virtual T visitMultiplicativeExpr(MultiplicativeExprNode *node) = 0;
  virtual T visitCastExpr(CastExprNode *node) = 0;
  virtual T visitPrefixUnaryExpr(PrefixUnaryExprNode *node) = 0;
  virtual T visitPostfixUnaryExpr(PostfixUnaryExprNode *node) = 0;
  virtual T visitAtomicExpr(AtomicExprNode *node) = 0;
  virtual T visitValue(ValueNode *node) = 0;
  virtual T visitPrimitiveValue(PrimitiveValueNode *node) = 0;
  virtual T visitFunctionCall(FunctionCallNode *node) = 0;
  virtual T visitArrayInitialization(ArrayInitializationNode *node) = 0;
  virtual T visitStructInstantiation(StructInstantiationNode *node) = 0;
  virtual T visitDataType(DataTypeNode *node) = 0;
  virtual T visitBaseDataType(BaseDataTypeNode *node) = 0;
  virtual T visitCustomDataType(CustomDataTypeNode *node) = 0;
};