# Publish Compiler binaries
name: Release

on:
  push:
    tags:
      - '*'

jobs:
  build-compiler:
    name: Build compiler binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          #- {
          #    arch: linux-arm64,
          #    dockcross: 20210805-77da067,
          #    cmake_params:
          #  }
          #- {
          #    arch: linux-armv5,
          #    dockcross: 20210805-77da067,
          #    cmake_params:
          #  }
          #- {
          #    arch: linux-armv6,
          #    dockcross: 20210805-77da067,
          #    cmake_params:
          #  }
          #- {
          #    arch: linux-armv7,
          #    dockcross: 20210805-77da067,
          #    cmake_params:
          #  }
          - {
              arch: linux-x86,
              dockcross: 20210805-77da067,
              cmake_params:
            }
          - {
              arch: linux-x64,
              dockcross: 20210805-77da067,
              cmake_params:
            }
          #- {
          #    arch: windows-static-x86,
          #    dockcross: 20210804-76ae808,
          #    cmake_params: -DCMAKE_CROSSCOMPILING=1 -DRUN_HAVE_STD_REGEX=0 -DRUN_HAVE_POSIX_REGEX=0
          #  }
          #- {
          #    arch: windows-static-x64,
          #    dockcross: 20210805-77da067,
          #    cmake_params: -DCMAKE_CROSSCOMPILING=1 -DRUN_HAVE_STD_REGEX=0 -DRUN_HAVE_POSIX_REGEX=0
          #  }
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Prepare builder
        run: |
          docker run --rm dockcross/${{ matrix.config.arch }}:${{ matrix.config.dockcross }} > ./dockcross
          chmod +x dockcross
          mkdir bin

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: /home/runner/work/spice/spice/llvm
          key: llvm-13-0-0-${{ matrix.config.arch }}

      - name: Setup LLVM - Configure
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: | #-DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON
          git clone --depth 1 https://github.com/llvm/llvm-project llvm
          ./dockcross --image dockcross/${{ matrix.config.arch }}:${{ matrix.config.dockcross }} cmake -B./llvm/build -H./llvm/llvm -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS_RELEASE="-O2" ${{ matrix.config.cmake_params }} -Wno-dev -Wattributes

      - name: Setup LLVM - Build
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          ./dockcross --image dockcross/${{ matrix.config.arch }}:${{ matrix.config.dockcross }} ninja -C./llvm/build

      - name: Download Libs
        run: |
          mkdir -p ./compiler/lib
          cd ./compiler/lib
          git clone --depth 1 https://github.com/antlr/antlr4.git
      
      - name: Configure & compile project
        run: ./dockcross -a "-e LLVM_DIR=/work/llvm/build/lib/cmake/llvm" sh -c "sudo mkdir -p /usr/share/man/man1 && sudo apt-get update -y && sudo apt-get install --ignore-missing --no-install-recommends --yes libc6-i386 openjdk-11-jre uuid-dev && cmake -Bbin -H./compiler -GNinja && ninja -Cbin"

      - name: Process build output - Linux
        if: ${{ startsWith(matrix.config.arch, 'linux') }}
        working-directory: bin
        run: |
          mv ./src/Spice_run spicec
          chmod +x spicec
          
      - name: Process build output - Windows
        if: ${{ startsWith(matrix.config.arch, 'windows') }}
        working-directory: bin
        run: mv ./src/Spice_run.exe spicec.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: spicec-${{ matrix.config.arch }}
          path: ./bin/spicec**

  build-cli:
    name: Build CLI binaries
    needs: build-compiler
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Restore Go modules cache
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Docker login GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Docker login Docker Hub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: chillibits
          password: ${{ secrets.DOCKER_HUB_SECRET }}

      - name: Download all artifacts of compiler build
        uses: actions/download-artifact@v2
        with:
          path: bin

      - name: Rename compiler binaries & allow execution
        working-directory: bin
        run: | # mv spicec-windows-static-x86 spicec-windows-386 \n mv spicec-windows-static-x64 spicec-windows-amd64
          mv spicec-linux-x86 spicec-linux-386
          mv spicec-linux-x64 spicec-linux-amd64
          chmod -R +x ./

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: v1.0.0
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          #TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          #TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          #TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}

      - uses: actions/upload-artifact@v2
        with:
          name: dist-output
          path: dist/

  deploy-nexus:
    name: Deploy to Nexus
    needs: build-cli
    runs-on: ubuntu-latest
    if: contains(github.ref, 'rc') == false
    strategy:
      matrix:
        arch:
          - amd64
          - 386
          #- arm64
          #- armv5
          #- armv6
          #- armv7
    steps:
      - name: Get version name
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Download dist output
        uses: actions/download-artifact@v2
        with:
          name: dist-output

      - name: Deploy to Debian / Raspbian repo
        run: |
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/debian-bullseye/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/debian-buster/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/debian-stretch/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/debian-jessie/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/debian-wheezy/"

      - name: Deploy to Ubuntu repo
        run: |
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-hirsute/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-groovy/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-focal/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-bionic/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-xenial/"
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.deb" "${{ secrets.NEXUS_URL }}/ubuntu-trusty/"
      
      - name: Deploy to CentOS repo
        run: |
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --upload-file ./spice_${{ matrix.arch }}.rpm ${{ secrets.NEXUS_URL }}/centos/spice/${{ steps.get_version.outputs.version }}/spice-${{ matrix.arch }}.rpm
      
      - name: Deploy to Fedora repo
        run: |
          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --upload-file ./spice_${{ matrix.arch }}.rpm ${{ secrets.NEXUS_URL }}/fedora/spice/${{ steps.get_version.outputs.version }}/spice-${{ matrix.arch }}.rpm

#      - name: Deploy to Alpine repo
#        run: |
#          curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart/form-data" --data-binary "@./spice_${{ matrix.arch }}.apk" "${{ secrets.NEXUS_URL }}/alpine/spice/${{ steps.get_version.outputs.version }}/spice-${{ matrix.arch }}.apk"

#  build-win-installers:
#    name: Build installers
#    needs: build-cli
#    runs-on: windows-latest
#    strategy:
#      matrix:
#        config:
#          - {
#              arch: amd64, label: x64
#            }
#          - {
#              arch: 386, label: x86
#            }
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Get version name
#        id: get_version
#        uses: battila7/get-version-action@v2
#
#      - name: Download executables
#        id: download_exe
#        shell: bash
#        run: | # Remove the last command as soon as this is implemented: https://github.com/goreleaser/goreleaser/issues/1638
#          hub release download "${GITHUB_REF#refs/tags/}" -i '*windows_${{ matrix.config.arch }}*.zip'
#          printf "::set-output name=zip::%s\n" *.zip
#          unzip -o *.zip && rm -v *.zip
#          cp ./bin/spicec-windows-${{ matrix.config.arch }}/spicec.exe ./spicec.exe
#        env:
#          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
#
#      - name: Install GoMSI
#        run: choco install -y go-msi
#
#      - name: Prepare PATH
#        shell: bash
#        run: |
#          echo "$WIX\\bin" >> $GITHUB_PATH
#          echo "C:\\Program Files\\go-msi" >> $GITHUB_PATH
#
#      - name: Build MSI
#        shell: bash
#        id: build_msi
#        env:
#          ZIP_FILE: ${{ steps.download_exe.outputs.zip }}
#        run: |
#          mkdir -p build
#          msi="$(basename "$ZIP_FILE" ".zip").msi"
#          printf "::set-output name=msi::%s\n" "$msi"
#          go-msi make --msi "$PWD/$msi" --out "$PWD/build" --version ${{ steps.get_version.outputs.version }}
#          printf "::set-output name=msi::%s\n" *.msi
#
#      - name: Upload MSI
#        uses: svenstaro/upload-release-action@v2
#        with:
#          repo_token: ${{ secrets.GITHUB_TOKEN }}
#          file: ${{ steps.build_msi.outputs.msi }}
#          asset_name: spice_${{ matrix.config.label }}_setup.msi
#          tag: ${{ github.ref }}
